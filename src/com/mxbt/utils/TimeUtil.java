package com.mxbt.utils;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

import com.mxbt.beans.AndWriteBean;
import com.mxbt.dao.ForCreate;
import com.mxbt.dao.ForTimmer;


public class TimeUtil {  
    public void count  () {  
        // TODO todo.generated by zoer  
        Timer timer = new Timer();  
        timer.schedule(new MyTask(), 1000, 2000);  
    }  
}  
  
class MyTask extends TimerTask {  
  
    @Override  
    public void run() {  
       
        ForTimmer ft = new ForTimmer();
       
        //得到所有需要统计续写的章节
        List<Integer> cidList = new ArrayList<>();
        cidList = ft.getChapter();
        List<String> ctimeList = new ArrayList<>();
        ctimeList = ft.getChapterTime();
        List<Integer> cnum = new ArrayList<>();
        cnum = ft.getChapterNum();
        List<Integer> Caid = new ArrayList<>();
        Caid = ft.getChapterAid();
        System.out.println(cidList.toString());
        //得到对应的续写
        for(int i=0;i<cidList.size();i++){
        	AndWriteBean andWriteBean  = ft.getAndWrite(cidList.get(i));
        	
        	//得到当前时间和文章创建时间
        	Date now = new Date();//当前时间
        	Date ctime = null;
        	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
        	try {
				ctime=sdf.parse(ctimeList.get(i));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
       
        	//判断是否到了统计的时间
        	if(	((int) ((now.getTime()-ctime.getTime())/1000/60))>=5){
        		//判断是否有续写
        		
        		if(andWriteBean!=null){
        			//如果有选择得票数最高，日期最早进行插入
        		 	System.out.println(cidList.get(i)+andWriteBean.toString());
                	String nowtime = sdf.format(now);
                	ft.updateChapter(cidList.get(i), andWriteBean, cnum.get(i), nowtime, Caid.get(i));
                	
                }
        	}
        	
        }
 
    }  
  
}  